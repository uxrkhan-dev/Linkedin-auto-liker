(async () => {
  const delay = (ms) => new Promise((res) => setTimeout(res, ms));
  const processed = new Set();

  async function likeOnProfile() {
    await delay(5000);
    const likeBtns = Array.from(document.querySelectorAll('button[aria-label*="Like"]'))
      .filter(btn => !btn.classList.contains('react-button--active'))
      .slice(0, 2);

    for (const btn of likeBtns) {
      btn.scrollIntoView({ behavior: 'smooth', block: 'center' });
      await delay(1500 + Math.random() * 1000);
      btn.click();
      console.log("‚úÖ Liked profile post");
      await delay(2000);
    }

    window.history.back();
    await delay(5000);
  }

  async function engageWithPosts() {
    const posts = Array.from(document.querySelectorAll('div.feed-shared-update-v2'));
    let actionTaken = false;

    for (const post of posts) {
      const urn = post.getAttribute("data-urn");
      if (!urn || processed.has(urn)) continue;
      processed.add(urn);

      const likeBtn = post.querySelector('button[aria-label*="Like"]');
      if (likeBtn && !likeBtn.classList.contains('react-button--active')) {
        likeBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });
        await delay(1500 + Math.random() * 1000);
        likeBtn.click();
        console.log("üëç Liked feed post");
        await delay(2000);
        actionTaken = true;
      }

      const profileLink = post.querySelector("a[href*='/in/']");
      if (profileLink) {
        profileLink.scrollIntoView({ behavior: 'smooth', block: 'center' });
        await delay(1500);
        profileLink.click();
        console.log("üë§ Visiting profile...");
        await delay(5000);
        await likeOnProfile();
        actionTaken = true;
        break; // exit loop to return from profile
      }
    }

    return actionTaken;
  }

  async function startInfiniteLoop() {
    console.log("üîÅ Bot started...");

    while (true) {
      // Scroll to load new posts
      for (let i = 0; i < 12; i++) {
        window.scrollBy(0, 1500);
        await delay(2000 + Math.random() * 1500);
      }

      const result = await engageWithPosts();

      if (!result) {
        console.log("üåÄ No new posts found. Reloading...");
        await delay(5000);
        location.reload();
        break; // Let user restart after reload
      }

      const sleep = 60000 + Math.random() * 60000;
      console.log(`‚è≥ Waiting ${(sleep / 1000).toFixed(0)}s before next round...`);
      await delay(sleep);
    }
  }

  startInfiniteLoop();
})();
